services:
  todo-app:
    image: lhatmjnk/license_plate_verify-todo-app:latest
    build:
      context: .
    ports:
<<<<<<< HEAD
      - 8000:8000
    depends_on:
      - db
    develop:
      watch:
        - path: .
          action: rebuild
        - path: .
          target: /usr/src/app
          action: sync

  db:
    image: lhatmjnk/db:latest
    restart: always
    environment:
      POSTGRES_DB: LP_Verification
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 177013
    ports:
      - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./App/init.sql:/docker-entrypoint-initdb.d/init.sql
=======
      - 8501:8501
    volumes:
      - LP_verify_app:/app

volumes:
  LP_verify_app:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
  #   depends_on:
  #     db:
  #       condition: service_healthy
  # db:
  #   image: postgres
  #   restart: always
  #   user: postgres
  #   secrets:
  #     - db-password
  #   volumes:
  #     - db-data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=example
  #     - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
  #   expose:
  #     - 5432
  #   healthcheck:
  #     test: [ "CMD", "pg_isready" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  # volumes:
  #   db-data:
  # secrets:
  #   db-password:
  #     file: db/password.txt
>>>>>>> fd34c6c0beade9e19b5d8e60ca1704acbedd0e5b

volumes:
  db-data: